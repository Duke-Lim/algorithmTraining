"""
    1. 로그의 형식은 2016-09-15 hh:mm:ss.sss s.sss 형식으로 되어있다.
    1-1. 로그는 응답 완료 시간을 의미하며 처리시간은 s.sss 이며 공백으로 구분되어있다
    1-2. 예를 들어, 로그 2016-09-15 03:10:33.020 0.011s는 03시 10분 33.010초부터
         03시 10분 33.020초까지 0.011s 동안 처리된 요청을 의미한다.
    2. 처리시간은 시작시간과 종료 시간을 포함한다.
    3. 요청량이 변하는 순간은 시작시간과 종료 시간만 변한다.
    4. 가장 높은 요청량을 구하자.
    4-1. 로그의 요청 시작 시간과 1초 뒤의 시간에 포함되어있는 시간의 개수를 세면 된다.
    4-2. 마찬가지로 요청 종료 시간도 같은 행동을 한다.
    4-3. 만약 위 둘 중 어느 것도 포함이 안 된다면 둘 중 하나일 것이다. 아예 다른 시간이거나, 혹은 그 시간에는 포함되어 있으나
         시작 시간과 종료 시간이 다를 경우이다. 이럴 경우에도 요청량에 포함해야 함으로 이것도 개수로 샌다.

    정답률 : 17.99%
"""


def string_to_second(time):  # 2016-09-15 hh:mm:ss.sss s.sss 형식의 시간을 시작 시간과 종 시간으로 바꾼 뒤 초로 바꿔주는 함수
    split_time = str(time).split()

    hour = int(split_time[1][0:2]) * 3600
    minute = int(split_time[1][3:5]) * 60
    second = float(split_time[1][6:])

    t = float(str(split_time[2].replace("s", ""))) - 0.001  # 0.001초를 빼주는 이유는 시작시간을 포함하기 때문

    start_time = hour + minute + second - t  # 요청 시작 시간

    end_time = hour + minute + second  # 요청 종료 시간

    return round(start_time, 4), round(end_time, 4)  # 부동소수점 오류를 방지하기 위해 최대 소수점 3자리 까지만, 기록하기에 4자리 수에서 반올림한다.


logs = ["2016-09-15 20:59:57.421 0.351s", "2016-09-15 20:59:58.233 1.181s",
        "2016-09-15 20:59:58.299 0.8s", "2016-09-15 20:59:58.688 1.041s",
        "2016-09-15 20:59:59.591 1.412s", "2016-09-15 21:00:00.464 1.466s",
        "2016-09-15 21:00:00.741 1.581s", "2016-09-15 21:00:00.748 2.31s",
        "2016-09-15 21:00:00.966 0.381s", "2016-09-15 21:00:02.066 2.62s"]  # 응답 완료 로그

max = 0  # 가장 높은 요청량 기록

for log in logs:  # 로그들의 개수만큼 반복한다.
    for time in string_to_second(log):  # 각 로그의 요청 시작 시간과 종료 시간마다 새어야 하기에 반복을 한다.
        count = 0  # 초마다 다르게 개수를 야 하기에 매번 초기화한다.

        for log2 in logs:  # 각 로그의 시작 시간과 종 시간에 포함되었는지를 판단하기 위해 모든 로그를 뒤져본다.
            first_time = string_to_second(log2)[0]  # 각 로그의 요청 시작 시간
            last_time = string_to_second(log2)[1]  # 각 로그의 요청 종료 시간

            if time <= first_time < time + 1:  # 4-1 참조
                count = count + 1
            elif time <= last_time < time + 1:  # 4-2 참조
                count = count + 1
            elif first_time < time < last_time:  # 4-3 참조
                count = count + 1

        if count > max:  # 이번 요청량이 최대 요청량보다 클 경우
            max = count

print(max)
